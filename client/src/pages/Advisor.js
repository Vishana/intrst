import React, { useState, useRef, useEffect } from 'react';
import {
  Send,
  Bot,
  User,
  TrendingUp,
  PieChart,
  Target,
  DollarSign,
  Download,
  Save,
  Sparkles
} from 'lucide-react';
import axios from 'axios';
import { useAuth } from '../context/AuthContext';
import LoadingSpinner from '../components/common/LoadingSpinner';
import FinancialChart from '../components/charts/FinancialChart';

const Advisor = () => {
  const { user } = useAuth();
  const [messages, setMessages] = useState([]);
  const [inputMessage, setInputMessage] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [currentVisualization, setCurrentVisualization] = useState(null);
  const messagesEndRef = useRef(null);
  const inputRef = useRef(null);

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  };

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  useEffect(() => {
    // Add welcome message
    setMessages([
      {
        id: '1',
        type: 'bot',
        content: `Hi ${user?.name?.split(' ')[0] || 'there'}! ðŸ‘‹ I'm your AI financial advisor. I can help you with budgeting, saving strategies, investment advice, and more. What would you like to discuss today?`,
        timestamp: new Date(),
        suggestions: [
          'How can I save more money?',
          'Analyze my spending patterns',
          'Help me optimize my goals',
          'Investment recommendations'
        ]
      }
    ]);
  }, [user]);

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (!inputMessage.trim() || isLoading) return;

    const userMessage = {
      id: Date.now().toString(),
      type: 'user',
      content: inputMessage,
      timestamp: new Date()
    };

    setMessages(prev => [...prev, userMessage]);
    setInputMessage('');
    setIsLoading(true);

    try {
      const response = await axios.post('/api/advisor/chat', {
        message: inputMessage,
        context: {
          userId: user?.id,
          previousMessages: messages.slice(-5) // Last 5 messages for context
        }
      });

      const botMessage = {
        id: (Date.now() + 1).toString(),
        type: 'bot',
        content: response.data.response,
        timestamp: new Date(),
        insights: response.data.insights,
        suggestions: response.data.suggestions,
        visualization: response.data.visualization,
        followUpQuestions: response.data.followUpQuestions
      };

      setMessages(prev => [...prev, botMessage]);
      
      if (response.data.visualization) {
        setCurrentVisualization(response.data.visualization);
      }

    } catch (error) {
      console.error('Chat error:', error);
      
      // Fallback to mock response
      const mockResponse = generateMockResponse(inputMessage, user);
      const botMessage = {
        id: (Date.now() + 1).toString(),
        type: 'bot',
        content: mockResponse.content,
        timestamp: new Date(),
        insights: mockResponse.insights,
        suggestions: mockResponse.suggestions,
        visualization: mockResponse.visualization,
        followUpQuestions: mockResponse.followUpQuestions
      };

      setMessages(prev => [...prev, botMessage]);
      
      if (mockResponse.visualization) {
        setCurrentVisualization(mockResponse.visualization);
      }
    } finally {
      setIsLoading(false);
    }
  };

  const handleSuggestionClick = (suggestion) => {
    setInputMessage(suggestion);
    inputRef.current?.focus();
  };

  const saveVisualization = async () => {
    if (!currentVisualization) return;

    try {
      await axios.post('/api/visualizations', {
        title: currentVisualization.title || 'Financial Visualization',
        type: currentVisualization.type,
        data: currentVisualization.data,
        description: 'Generated by AI Advisor'
      });
      
      alert('Visualization saved successfully!');
    } catch (error) {
      console.error('Failed to save visualization:', error);
      alert('Failed to save visualization');
    }
  };

  return (
    <div className="min-h-screen bg-gray-50">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* Header */}
        <div className="mb-8">
          <div className="flex items-center space-x-3 mb-2">
            <div className="w-10 h-10 bg-gradient-to-r from-purple-500 to-indigo-600 rounded-xl flex items-center justify-center">
              <Bot className="w-6 h-6 text-white" />
            </div>
            <div>
              <h1 className="text-3xl font-bold text-gray-900">
                AI Financial Advisor
              </h1>
              <p className="text-gray-600">
                Get personalized financial advice powered by AI
              </p>
            </div>
          </div>
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
          {/* Chat Section */}
          <div className="lg:col-span-2">
            <div className="card h-[600px] flex flex-col">
              {/* Messages */}
              <div className="flex-1 overflow-y-auto p-4 space-y-4">
                {messages.map((message) => (
                  <MessageBubble
                    key={message.id}
                    message={message}
                    onSuggestionClick={handleSuggestionClick}
                  />
                ))}
                
                {isLoading && (
                  <div className="flex items-center space-x-2 text-gray-500">
                    <Bot className="w-5 h-5" />
                    <LoadingSpinner size="small" />
                    <span className="text-sm">AI is thinking...</span>
                  </div>
                )}
                
                <div ref={messagesEndRef} />
              </div>

              {/* Input */}
              <div className="border-t border-gray-200 p-4">
                <form onSubmit={handleSubmit} className="flex space-x-2">
                  <input
                    ref={inputRef}
                    type="text"
                    value={inputMessage}
                    onChange={(e) => setInputMessage(e.target.value)}
                    placeholder="Ask me anything about your finances..."
                    className="flex-1 input-field"
                    disabled={isLoading}
                  />
                  <button
                    type="submit"
                    disabled={isLoading || !inputMessage.trim()}
                    className="btn-primary px-4 disabled:opacity-50"
                  >
                    <Send className="w-4 h-4" />
                  </button>
                </form>

                {/* Quick Actions */}
                <div className="flex flex-wrap gap-2 mt-3">
                  {quickActions.map((action, index) => (
                    <button
                      key={index}
                      onClick={() => handleSuggestionClick(action.text)}
                      className="inline-flex items-center px-3 py-1 text-xs bg-gray-100 hover:bg-gray-200 rounded-full text-gray-700 transition-colors"
                    >
                      <action.icon className="w-3 h-3 mr-1" />
                      {action.text}
                    </button>
                  ))}
                </div>
              </div>
            </div>
          </div>

          {/* Visualization & Tools */}
          <div className="space-y-6">
            {/* Current Visualization */}
            {currentVisualization && (
              <div className="card">
                <div className="flex items-center justify-between mb-4">
                  <h3 className="text-lg font-semibold text-gray-900">
                    Visualization
                  </h3>
                  <div className="flex space-x-2">
                    <button
                      onClick={saveVisualization}
                      className="p-2 text-gray-600 hover:text-primary-600 rounded"
                    >
                      <Save className="w-4 h-4" />
                    </button>
                    <button className="p-2 text-gray-600 hover:text-primary-600 rounded">
                      <Download className="w-4 h-4" />
                    </button>
                  </div>
                </div>
                
                <VisualizationDisplay visualization={currentVisualization} />
              </div>
            )}

            {/* AI Insights Summary */}
            <div className="card">
              <div className="flex items-center space-x-2 mb-4">
                <Sparkles className="w-5 h-5 text-purple-600" />
                <h3 className="text-lg font-semibold text-gray-900">
                  Recent Insights
                </h3>
              </div>
              
              <div className="space-y-3">
                {messages
                  .filter(m => m.type === 'bot' && m.insights)
                  .slice(-3)
                  .map((message, index) => (
                    <div key={index} className="p-3 bg-purple-50 rounded-lg">
                      <div className="space-y-1">
                        {message.insights.map((insight, idx) => (
                          <p key={idx} className="text-sm text-purple-800">
                            â€¢ {insight}
                          </p>
                        ))}
                      </div>
                    </div>
                  ))}
              </div>
            </div>

            {/* Financial Health Score */}
            <div className="card">
              <h3 className="text-lg font-semibold text-gray-900 mb-4">
                Financial Health Score
              </h3>
              
              <div className="text-center">
                <div className="text-3xl font-bold text-green-600 mb-2">
                  {user?.financialProfile?.healthScore || 75}
                </div>
                <p className="text-sm text-gray-600 mb-4">
                  Good financial health
                </p>
                
                <div className="space-y-2 text-left">
                  <ScoreItem label="Savings Rate" score={80} />
                  <ScoreItem label="Debt Management" score={70} />
                  <ScoreItem label="Budget Adherence" score={75} />
                  <ScoreItem label="Investment Diversity" score={65} />
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

// Message Bubble Component
const MessageBubble = ({ message, onSuggestionClick }) => {
  const isBot = message.type === 'bot';

  return (
    <div className={`flex ${isBot ? 'justify-start' : 'justify-end'}`}>
      <div className={`max-w-xs lg:max-w-md ${isBot ? 'order-2' : 'order-1'}`}>
        <div className={`px-4 py-2 rounded-2xl ${
          isBot
            ? 'bg-gray-100 text-gray-800'
            : 'bg-primary-600 text-white'
        }`}>
          <p className="text-sm whitespace-pre-wrap">{message.content}</p>
          
          {message.insights && (
            <div className="mt-2 pt-2 border-t border-gray-200">
              <p className="text-xs font-medium mb-1">Key Insights:</p>
              {message.insights.map((insight, index) => (
                <p key={index} className="text-xs opacity-90">
                  â€¢ {insight}
                </p>
              ))}
            </div>
          )}
        </div>
        
        {message.suggestions && (
          <div className="mt-3 space-y-2">
            <p className="text-xs font-medium mb-2 opacity-75">Recommended Actions:</p>
            {message.suggestions.map((suggestion, index) => {
              // Handle both string suggestions and object suggestions
              const suggestionText = typeof suggestion === 'string' ? suggestion : suggestion.title || suggestion.description;
              
              // Extract the title (everything before the first colon) for click action
              const suggestionClick = suggestionText.includes(':') 
                ? suggestionText.split(':')[0].replace(/^\*\*|\*\*$/g, '').trim()
                : suggestionText.replace(/^\*\*|\*\*$/g, '').trim();
              
              return (
                <button
                  key={index}
                  onClick={() => onSuggestionClick(suggestionClick)}
                  className="block w-full text-left px-3 py-2 text-xs bg-white border border-gray-200 rounded-lg hover:bg-gray-50 transition-colors"
                  title="Click to ask about this recommendation"
                >
                  <div className="whitespace-pre-wrap">{suggestionText.replace(/^\*\*|\*\*$/g, '')}</div>
                </button>
              );
            })}
          </div>
        )}
        
        {message.followUpQuestions && (
          <div className="mt-3 space-y-1">
            <p className="text-xs font-medium mb-2 opacity-75">Follow-up Questions:</p>
            {message.followUpQuestions.map((question, index) => (
              <button
                key={index}
                onClick={() => onSuggestionClick(question)}
                className="block w-full text-left px-3 py-1 text-xs bg-blue-50 border border-blue-200 rounded-lg hover:bg-blue-100 transition-colors text-blue-800"
                title="Click to ask this question"
              >
                {question}
              </button>
            ))}
          </div>
        )}
        
        <p className="text-xs text-gray-500 mt-1">
          {message.timestamp.toLocaleTimeString([], {
            hour: '2-digit',
            minute: '2-digit'
          })}
        </p>
      </div>
      
      <div className={`flex-shrink-0 ${isBot ? 'order-1 mr-2' : 'order-2 ml-2'}`}>
        <div className={`w-8 h-8 rounded-full flex items-center justify-center ${
          isBot
            ? 'bg-gradient-to-r from-purple-500 to-indigo-600'
            : 'bg-primary-600'
        }`}>
          {isBot ? (
            <Bot className="w-4 h-4 text-white" />
          ) : (
            <User className="w-4 h-4 text-white" />
          )}
        </div>
      </div>
    </div>
  );
};

// Visualization Display Component
const VisualizationDisplay = ({ visualization }) => {
  if (!visualization) return null;

  // This would render different chart types based on visualization.type
  // For now, we'll show a simple representation
  return (
    <div className="space-y-3">
      <p className="text-sm text-gray-600">
        {visualization.description || 'AI-generated financial visualization'}
      </p>
      
      <div className="h-48 bg-gradient-to-r from-blue-50 to-purple-50 rounded-lg flex items-center justify-center">
        <div className="text-center">
          <PieChart className="w-12 h-12 text-purple-400 mx-auto mb-2" />
          <p className="text-sm text-gray-600">
            {visualization.type?.replace('-', ' ').toUpperCase()} Chart
          </p>
          <p className="text-xs text-gray-500 mt-1">
            Interactive visualization would appear here
          </p>
        </div>
      </div>
    </div>
  );
};

// Score Item Component
const ScoreItem = ({ label, score }) => (
  <div className="flex items-center justify-between">
    <span className="text-sm text-gray-600">{label}</span>
    <div className="flex items-center space-x-2">
      <div className="w-16 bg-gray-200 rounded-full h-2">
        <div
          className={`h-2 rounded-full ${
            score >= 80 ? 'bg-green-500' : score >= 60 ? 'bg-yellow-500' : 'bg-red-500'
          }`}
          style={{ width: `${score}%` }}
        />
      </div>
      <span className="text-sm font-medium w-8">{score}</span>
    </div>
  </div>
);

// Quick Actions
const quickActions = [
  { icon: TrendingUp, text: 'Analyze my spending' },
  { icon: Target, text: 'Optimize my goals' },
  { icon: DollarSign, text: 'Investment advice' },
  { icon: PieChart, text: 'Budget recommendations' }
];

// Mock response generator
const generateMockResponse = (message, user) => {
  const lowerMessage = message.toLowerCase();
  
  if (lowerMessage.includes('spend')) {
    return {
      content: `I've analyzed your spending patterns over the past month. You're spending $${Math.round(Math.random() * 1000 + 2000)} monthly, with dining out being your largest discretionary expense at 40% above average. Consider setting a weekly dining budget of $150 to optimize your savings.`,
      insights: [
        'Dining expenses are 40% above recommended levels',
        'Transportation costs have decreased 15% - great progress!',
        'Subscription services could be optimized'
      ],
      suggestions: [
        'Set up automatic savings transfers',
        'Review subscription services',
        'Try meal prepping for weekends'
      ],
      followUpQuestions: [
        'What percentage of income should I save?',
        'How can I reduce my dining expenses?'
      ],
      visualization: {
        type: 'spending-breakdown',
        description: 'Monthly spending by category'
      }
    };
  }
  
  if (lowerMessage.includes('save')) {
    return {
      content: `Based on your income of $${user?.financialProfile?.monthlyIncome || 4500}, I recommend following the 50/30/20 rule. You should aim to save $${Math.round((user?.financialProfile?.monthlyIncome || 4500) * 0.2)} monthly. Currently, you're saving about 15% - let's work on getting to 20%!`,
      insights: [
        'Current savings rate is below optimal 20%',
        'Emergency fund should cover 6 months of expenses',
        'High-yield savings account could increase returns by 0.5%'
      ],
      suggestions: [
        'Set up automatic weekly transfers of $125',
        'Open a high-yield savings account',
        'Review and optimize recurring subscriptions'
      ],
      followUpQuestions: [
        'Which high-yield accounts do you recommend?',
        'How much should my emergency fund be?'
      ]
    };
  }
  
  return {
    content: `That's a great question! I'm here to help you make smarter financial decisions. Based on your profile, I can see opportunities to optimize your budget, improve your savings rate, and work towards your financial goals more effectively. What specific area would you like to focus on?`,
    insights: [
      'Your financial profile shows good fundamentals',
      'There are opportunities for optimization',
      'Setting specific goals will help track progress'
    ],
    suggestions: [
      'Review your monthly budget',
      'Analyze spending patterns',
      'Set up emergency fund goal'
    ],
    followUpQuestions: [
      'What tools can help me track spending?',
      'How do I set realistic financial goals?'
    ]
  };
};

export default Advisor;
