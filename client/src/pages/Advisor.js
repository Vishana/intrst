import React, { useState, useRef, useEffect } from 'react';
import {
  Send,
  Bot,
  User,
  TrendingUp,
  PieChart,
  Target,
  DollarSign,
  Download,
  Save,
  Sparkles
} from 'lucide-react';
import axios from 'axios';
import { useAuth } from '../context/AuthContext';
import LoadingSpinner from '../components/common/LoadingSpinner';
import FinancialChart from '../components/charts/FinancialChart';

const Advisor = () => {
  const { user } = useAuth();
  const [messages, setMessages] = useState([]);
  const [inputMessage, setInputMessage] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [currentVisualization, setCurrentVisualization] = useState(null);
  const messagesEndRef = useRef(null);
  const inputRef = useRef(null);

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  };

  useEffect(() => scrollToBottom(), [messages]);

  useEffect(() => {
    // Add welcome message
    const welcomeMessage = {
      id: '1',
      type: 'bot',
      content: `Hi ${user?.name?.split(' ')[0] || 'there'}! ðŸ‘‹ I'm your AI financial advisor. I can help you with budgeting, saving strategies, investment advice, and more. What would you like to discuss today?`,
      timestamp: new Date(),
      suggestions: [
        'How can I save more money?',
        'Analyze my spending patterns',
        'Help me optimize my goals',
        'Investment recommendations'
      ]
    };
    setMessages([welcomeMessage]);
    console.log('Added welcome message:', welcomeMessage);
  }, [user]);

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (!inputMessage.trim() || isLoading) return;

    const userMessage = {
      id: Date.now().toString(),
      type: 'user',
      content: inputMessage,
      timestamp: new Date()
    };
    setMessages(prev => [...prev, userMessage]);
    console.log('User sent message:', userMessage);

    setInputMessage('');
    setIsLoading(true);

    try {
      const response = await axios.post('/api/advisor/chat', {
        message: inputMessage,
        context: {
          userId: user?.id,
          previousMessages: messages.slice(-5)
        }
      });
      console.log('AI response received:', response.data);

      const botMessage = {
        id: (Date.now() + 1).toString(),
        type: 'bot',
        content: response.data.response || 'No response from AI',
        timestamp: new Date(),
        insights: Array.isArray(response.data.insights) ? response.data.insights : [],
        suggestions: Array.isArray(response.data.suggestions) ? response.data.suggestions : [],
        visualization: response.data.visualization || null,
        followUpQuestions: Array.isArray(response.data.followUpQuestions) ? response.data.followUpQuestions : []
      };

      setMessages(prev => [...prev, botMessage]);
      if (botMessage.visualization) setCurrentVisualization(botMessage.visualization);

    } catch (error) {
      console.error('Chat error:', error);

      // Fallback to mock response
      const mockResponse = generateMockResponse(inputMessage, user);
      console.log('Using mock response:', mockResponse);

      const botMessage = {
        id: (Date.now() + 1).toString(),
        type: 'bot',
        content: mockResponse.content,
        timestamp: new Date(),
        insights: Array.isArray(mockResponse.insights) ? mockResponse.insights : [],
        suggestions: Array.isArray(mockResponse.suggestions) ? mockResponse.suggestions : [],
        visualization: mockResponse.visualization || null,
        followUpQuestions: Array.isArray(mockResponse.followUpQuestions) ? mockResponse.followUpQuestions : []
      };

      setMessages(prev => [...prev, botMessage]);
      if (botMessage.visualization) setCurrentVisualization(botMessage.visualization);
    } finally {
      setIsLoading(false);
    }
  };

  const handleSuggestionClick = (suggestion) => {
    console.log('Suggestion clicked:', suggestion);
    setInputMessage(suggestion);
    inputRef.current?.focus();
  };

  const saveVisualization = async () => {
    if (!currentVisualization) return;

    try {
      await axios.post('/api/visualizations', {
        title: currentVisualization.title || 'Financial Visualization',
        type: currentVisualization.type,
        data: currentVisualization.data,
        description: 'Generated by AI Advisor'
      });
      console.log('Visualization saved:', currentVisualization);
      alert('Visualization saved successfully!');
    } catch (error) {
      console.error('Failed to save visualization:', error);
      alert('Failed to save visualization');
    }
  };

  return (
    <div className="min-h-screen bg-gray-50">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* Header */}
        <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between mb-8">
          <div>
            <h1 className="text-3xl font-bold text-gray-900">
              AI Financial Advisor
            </h1>
            <p className="mt-1 text-gray-600">
              Get personalized financial advice powered by AI
            </p>
          </div>
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-4 gap-8">
          {/* Chat Section */}
          <div className="lg:col-span-3">
            <div className="border-2 border-black rounded-lg" style={{backgroundColor: '#98B8D6'}}>
              <div className="h-[600px] flex flex-col">
                <div className="flex-1 overflow-y-auto p-6 space-y-4">
                  {messages.map((message) => (
                    <MessageBubble
                      key={message.id}
                      message={message}
                      onSuggestionClick={handleSuggestionClick}
                    />
                  ))}

                  {isLoading && (
                    <div className="flex items-center space-x-3 text-black border-2 border-black rounded-lg p-4" style={{backgroundColor: '#E2DBAD'}}>
                      <Bot className="w-5 h-5" />
                      <div className="w-4 h-4 border-2 border-black border-t-transparent rounded-full animate-spin"></div>
                      <span className="text-sm font-body">AI is analyzing your finances...</span>
                    </div>
                  )}

                  <div ref={messagesEndRef} />
                </div>

                {/* Input */}
                <div className="border-t-2 border-black p-6" style={{backgroundColor: '#CED697'}}>
                  <form onSubmit={handleSubmit} className="flex space-x-3">
                    <input
                      ref={inputRef}
                      type="text"
                      value={inputMessage}
                      onChange={(e) => setInputMessage(e.target.value)}
                      placeholder="Ask me anything about your finances..."
                      className="flex-1 px-4 py-3 border-2 border-black rounded-lg font-body focus:outline-none focus:ring-2 focus:ring-black text-black bg-white"
                      disabled={isLoading}
                    />
                    <button
                      type="submit"
                      disabled={isLoading || !inputMessage.trim()}
                      className="px-6 py-3 bg-black text-white border-2 border-black rounded-lg hover:bg-gray-800 disabled:opacity-50 disabled:cursor-not-allowed transition-all duration-200 flex items-center justify-center font-body"
                    >
                      <Send className="w-4 h-4" />
                    </button>
                  </form>

                  {/* Quick Actions */}
                  <div className="flex flex-wrap gap-2 mt-4">
                    {quickActions.map((action, index) => (
                      <button
                        key={index}
                        onClick={() => handleSuggestionClick(action.text)}
                        className="inline-flex items-center px-3 py-2 text-sm bg-white hover:bg-gray-100 border-2 border-black rounded-lg text-black transition-all duration-200 font-body"
                      >
                        <action.icon className="w-4 h-4 mr-2" />
                        {action.text}
                      </button>
                    ))}
                  </div>
                </div>
              </div>
            </div>
          </div>

          {/* Sidebar */}
          <div className="lg:col-span-1 space-y-6">
            {/* Visualization - Keep as is but add playful styling */}
            {currentVisualization && (
              <div className="mb-6">
                <div className="flex items-center justify-between mb-4">
                  <h3 className="text-lg font-semibold text-black font-body">Visualization</h3>
                  <div className="flex space-x-2">
                    <button
                      onClick={saveVisualization}
                      className="p-2 text-black hover:bg-gray-100 rounded-lg transition-colors"
                      title="Save Visualization"
                    >
                      <Save className="w-4 h-4" />
                    </button>
                    <button 
                      className="p-2 text-black hover:bg-gray-100 rounded-lg transition-colors"
                      title="Download"
                    >
                      <Download className="w-4 h-4" />
                    </button>
                  </div>
                </div>
                <VisualizationDisplay visualization={currentVisualization} />
              </div>
            )}

            {/* AI Insights */}
            <div className="border-2 border-black rounded-lg p-6" style={{backgroundColor: '#CED697'}}>
              <div className="flex items-center justify-between mb-6">
                <h3 className="text-lg font-semibold text-black font-body">Recent Insights</h3>
                <span className="text-sm text-black font-body">
                  AI-generated
                </span>
              </div>
              
              <div className="space-y-4">
                {messages
                  .filter(m => m.type === 'bot' && Array.isArray(m.insights) && m.insights.length > 0)
                  .slice(-3)
                  .map((message, index) => (
                    <div key={index} className="p-4 border-2 border-black rounded-lg bg-white">
                      <div className="space-y-2">
                        {message.insights.map((insight, idx) => (
                          <div key={idx} className="flex items-start space-x-3">
                            <div className="w-6 h-6 bg-black text-white rounded-full flex items-center justify-center flex-shrink-0 mt-0.5 border-2 border-black">
                              <span className="text-xs font-bold font-body">
                                {idx + 1}
                              </span>
                            </div>
                            <p className="text-sm text-black leading-relaxed font-body">{insight}</p>
                          </div>
                        ))}
                      </div>
                    </div>
                  ))}
                
                {messages.filter(m => m.type === 'bot' && Array.isArray(m.insights) && m.insights.length > 0).length === 0 && (
                  <div className="text-center py-8">
                    <div className="w-12 h-12 bg-black border-2 border-black rounded-full flex items-center justify-center mx-auto mb-3">
                      <Sparkles className="w-6 h-6 text-white" />
                    </div>
                    <p className="text-black text-sm font-body font-medium">Start a conversation to see AI insights</p>
                    <p className="text-black text-xs mt-1 font-body">Ask about your spending, savings, or investments</p>
                  </div>
                )}
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

// ----------------- MessageBubble -----------------
const MessageBubble = ({ message = {}, onSuggestionClick = () => {} }) => {
  const isBot = message.type === 'bot';
  const content = message.content || '';
  const insights = Array.isArray(message.insights) ? message.insights : [];
  const suggestions = Array.isArray(message.suggestions) ? message.suggestions : [];
  const followUpQuestions = Array.isArray(message.followUpQuestions) ? message.followUpQuestions : [];

  return (
    <div className={`flex ${isBot ? 'justify-start' : 'justify-end'}`}>
      <div className={`max-w-xs lg:max-w-md ${isBot ? 'order-2' : 'order-1'}`}>
        <div className={`px-4 py-3 rounded-lg border-2 border-black font-body ${
          isBot 
            ? 'bg-white text-black' 
            : 'bg-black text-white'
        }`}>
          <p className="text-sm whitespace-pre-wrap leading-relaxed">{content}</p>

          {insights.length > 0 && (
            <div className="mt-3 pt-3 border-t-2 border-black">
              <p className="text-xs font-bold mb-2">Key Insights:</p>
              <div className="space-y-1">
                {insights.map((insight, index) => (
                  <p key={index} className="text-xs flex items-start">
                    <span className="mr-2 font-bold">â€¢</span>
                    {insight}
                  </p>
                ))}
              </div>
            </div>
          )}
        </div>

        {suggestions.length > 0 && (
          <div className="mt-3 space-y-2">
            <p className="text-xs font-bold text-black mb-2 font-body">Recommended Actions:</p>
            {suggestions.map((suggestion, index) => {
              const suggestionText = typeof suggestion === 'string' ? suggestion : suggestion.title || suggestion.description || '';
              const suggestionClick = suggestionText.includes(':')
                ? suggestionText.split(':')[0].replace(/^\*\*|\*\*$/g, '').trim()
                : suggestionText.replace(/^\*\*|\*\*$/g, '').trim();

              return (
                <button
                  key={index}
                  onClick={() => onSuggestionClick(suggestionClick)}
                  className="block w-full text-left px-3 py-2 text-xs bg-white border-2 border-black rounded-lg hover:bg-gray-100 transition-all duration-200 font-body"
                >
                  {suggestionText}
                </button>
              );
            })}
          </div>
        )}

        {followUpQuestions.length > 0 && (
          <div className="mt-3 space-y-2">
            <p className="text-xs font-bold text-black mb-2 font-body">Follow-up Questions:</p>
            {followUpQuestions.map((question, index) => (
              <button
                key={index}
                onClick={() => onSuggestionClick(question)}
                className="block w-full text-left px-3 py-2 text-xs border-2 border-black rounded-lg hover:bg-white transition-all duration-200 text-black font-body"
                style={{backgroundColor: '#E2DBAD'}}
              >
                {question}
              </button>
            ))}
          </div>
        )}

        <p className="text-xs text-black mt-2 font-body">
          {message.timestamp?.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' }) || ''}
        </p>
      </div>

      <div className={`flex-shrink-0 ${isBot ? 'order-1 mr-3' : 'order-2 ml-3'}`}>
        <div className={`w-8 h-8 rounded-full flex items-center justify-center border-2 border-black ${
          isBot 
            ? 'bg-white text-black' 
            : 'bg-black text-white'
        }`}>
          {isBot ? <Bot className="w-4 h-4" /> : <User className="w-4 h-4" />}
        </div>
      </div>
    </div>
  );
};

// ----------------- VisualizationDisplay -----------------
const VisualizationDisplay = ({ visualization }) => {
  if (!visualization) return null;

  return (
    <div className="space-y-3">
      <p className="text-sm text-gray-600">
        {visualization.title || 'AI-generated financial visualization'}
      </p>
      <FinancialChart visualization={visualization} />
      {visualization.data?.datasets?.[0]?.data && (
        <div className="mt-4 text-center">
          <div className="text-lg font-semibold text-gray-900">
            Total: ${visualization.data.datasets[0].data.reduce((a, b) => a + b, 0).toLocaleString()}
          </div>
          <div className="text-sm text-gray-500">
            {visualization.data.labels?.length || 0} categories
          </div>
        </div>
      )}
    </div>
  );
};

// ----------------- Quick Actions -----------------
const quickActions = [
  { icon: TrendingUp, text: 'Analyze my spending' },
  { icon: Target, text: 'Optimize my goals' },
  { icon: DollarSign, text: 'Investment advice' },
  { icon: PieChart, text: 'Budget recommendations' }
];

// ----------------- Mock Response -----------------
const generateMockResponse = (message, user) => {
  const lowerMessage = message.toLowerCase();
  if (lowerMessage.includes('spend')) {
    return {
      content: `I've analyzed your spending patterns over the past month. You're spending $${Math.round(Math.random() * 1000 + 2000)} monthly.`,
      insights: ['Dining expenses high', 'Transport costs decreased', 'Subscriptions could be optimized'],
      suggestions: ['Set up automatic savings', 'Review subscriptions', 'Meal prep weekends'],
      followUpQuestions: ['What % of income should I save?', 'How to reduce dining expenses?'],
      visualization: { type: 'spending-breakdown', description: 'Monthly spending by category' }
    };
  }
  if (lowerMessage.includes('save')) {
    return {
      content: `Based on your income of $${user?.financialProfile?.monthlyIncome || 4500}, aim to save $${Math.round((user?.financialProfile?.monthlyIncome || 4500) * 0.2)} monthly.`,
      insights: ['Savings rate below 20%', 'Emergency fund should cover 6 months', 'High-yield account increases returns'],
      suggestions: ['Weekly auto transfers', 'Open high-yield savings', 'Optimize subscriptions'],
      followUpQuestions: ['Which high-yield accounts?', 'How much should my emergency fund be?']
    };
  }
  return {
    content: `That's a great question! Let's optimize your budget and savings.`,
    insights: ['Good fundamentals', 'Opportunities for optimization', 'Setting goals helps track progress'],
    suggestions: ['Review budget', 'Analyze spending', 'Set emergency fund goal'],
    followUpQuestions: ['What tools can track spending?', 'How to set realistic goals?']
  };
};

export default Advisor;
